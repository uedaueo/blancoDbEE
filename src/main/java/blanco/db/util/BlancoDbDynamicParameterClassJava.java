/*
 * blancoDb
 * Copyright (C) 2004-2006 Yasuo Nakanishi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */
package blanco.db.util;

import blanco.cg.BlancoCgObjectFactory;
import blanco.cg.valueobject.*;
import blanco.commons.util.BlancoNameAdjuster;
import blanco.db.common.stringgroup.BlancoDbLoggingModeStringGroup;
import blanco.db.common.valueobject.BlancoDbSetting;
import blanco.db.expander.query.BlancoPerfomanceCommonUtil;

import java.util.List;

/**
 * A utility class commonly used by blancoDb.
 *
 * The classes generated by this class will be used in the source code generated by blancoDb.
 *
 * @since 2020.09.04
 * @author tueda
 */
public class BlancoDbDynamicParameterClassJava {
    /**
     * Class name of this class itself
     */
    public static final String CLASS_NAME = "BlancoDbDynamicParameter";

    /**
     * A blancoCg object factory
     */
    private BlancoCgObjectFactory fCgFactory = null;

    /**
     * The source code that contains this class
     */
    private BlancoCgSourceFile fCgSourceFile = null;

    private BlancoDbSetting fDbSetting = null;

    public BlancoDbDynamicParameterClassJava(final BlancoCgObjectFactory cgFactory,
                                             final String argPackage, final BlancoDbSetting argDbSetting) {
        fCgFactory = cgFactory;
        fCgSourceFile = fCgFactory.createSourceFile(argPackage,
                "This code is generated by blanco Framework.");

        this.fDbSetting = argDbSetting;
    }

    public BlancoCgSourceFile expand() {
        final BlancoCgClass cgClass = fCgFactory.createClass(CLASS_NAME, null);
        cgClass.setGenerics("T");
        fCgSourceFile.getClassList().add(cgClass);

        {
            final List<String> listDesc = cgClass.getLangDoc()
                    .getDescriptionList();

            listDesc.add("A class that defines for dynamic conditional clauses.");
            listDesc.add("");
            listDesc.add("This class is used in the source code generated by blancoDb.<br>");
            listDesc.add("");
            listDesc.add("@since 2020.09.04");
            listDesc.add("@author blanco Framework");
        }

        {
            /* fields */
            cgClass.getFieldList().add(
                    buildField("key", "A key to refer to DynamicClause", "java.lang.String", null, null)
            );
            cgClass.getFieldList().add(
                    buildField("logicalOperator", "A logical operator used in connection when repeats COMPARE dynamic conditional clause types", "java.lang.String", null, "OR")
            );
            cgClass.getFieldList().add(
                    buildField("values", "A value to apply to the placeholder of PreparedStatement", "java.util.List", "T", null)
            );
        }

        {
            /* Getter/Setter */
            cgClass.getMethodList().add(
                    buildMethodSet("key", "A key to refer to DynamicClause", "java.lang.String", null)
            );
            cgClass.getMethodList().add(
                    buildMethodGet("key", "A key to refer to DynamicClause", "java.lang.String", null)
            );

            cgClass.getMethodList().add(
                buildMethodSet("logicalOperator", "A logical operator used in connection when repeats COMPARE dynamic conditional clause types", "java.lang.String", null)
            );
            cgClass.getMethodList().add(
                    buildMethodGet("logicalOperator", "A logical operator used in connection when repeats COMPARE dynamic conditional clause types", "java.lang.String", null)
            );

            cgClass.getMethodList().add(
                    buildMethodSet("values", "A value to apply to the placeholder of PreparedStatement", "java.util.List", "T")
            );
            cgClass.getMethodList().add(
                    buildMethodGet("values", "A value to apply to the placeholder of PreparedStatement", "java.util.List", "T")
            );
        }

        if (fDbSetting.getLogging()) {
            switch (fDbSetting.getLoggingMode()) {
            case BlancoDbLoggingModeStringGroup.PERFORMANCE:
            case BlancoDbLoggingModeStringGroup.SQLID:
                BlancoPerfomanceCommonUtil.addPerfomanceFieldMethod(fCgFactory,
                        fCgSourceFile, cgClass);
                break;
            }
        }

        return fCgSourceFile;
    }

    private BlancoCgField buildField(
            final String name,
            final String desc,
            final String type,
            final String generic,
            final String defaultValue
    ) {
        final BlancoCgField cgField = fCgFactory.createField(name, type, desc);
        cgField.setAccess("private");
        if (generic != null && generic.length() > 0) {
            cgField.getType().setGenerics(generic);
        }
        if (defaultValue != null && defaultValue.length() > 0) {
            if ("java.lang.String".equals(type)) {
                cgField.setDefault("\"" + defaultValue + "\"");
            } else {
                cgField.setDefault(defaultValue);
            }
        }
        return cgField;
    }

    private BlancoCgMethod buildMethodSet(
            final String name,
            final String desc,
            final String type,
            final String generic
    ) {
        // Generates a setter method for each field.
        final BlancoCgMethod cgMethod = fCgFactory.createMethod("set" + BlancoNameAdjuster.toClassName(name), desc);

        BlancoCgParameter parameter = fCgFactory.createParameter("arg" + BlancoNameAdjuster.toClassName(name), type, desc);
        if (generic != null && generic.length() > 0) {
            parameter.getType().setGenerics(generic);
        }
        cgMethod.getParameterList().add(parameter);

        // method implementation
        cgMethod.getLineList().add(
                "this." + name + " = " + "arg" + BlancoNameAdjuster.toClassName(name) + ";"
        );
        return cgMethod;
    }

    private BlancoCgMethod buildMethodGet(
            final String name,
            final String desc,
            final String type,
            final String generic
    ) {
        // Generates a getter method for each field.
        final BlancoCgMethod cgMethod = fCgFactory.createMethod("get" + BlancoNameAdjuster.toClassName(name), desc);

        cgMethod.setReturn(fCgFactory.createReturn(type, desc));
        if (generic != null && generic.length() > 0) {
            cgMethod.getReturn().getType().setGenerics(generic);
        }

        // method implementation
        cgMethod.getLineList().add(
                "return this." + name + ";");

        return cgMethod;
    }
}
