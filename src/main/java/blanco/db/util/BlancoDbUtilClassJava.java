/*
 * blancoDb
 * Copyright (C) 2004-2006 Yasuo Nakanishi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */
package blanco.db.util;

import blanco.cg.BlancoCgObjectFactory;
import blanco.cg.valueobject.*;
import blanco.db.common.stringgroup.BlancoDbDriverNameStringGroup;
import blanco.db.common.stringgroup.BlancoDbLoggingModeStringGroup;
import blanco.db.common.util.BlancoDbUtil;
import blanco.db.common.valueobject.BlancoDbSetting;
import blanco.db.expander.query.BlancoPerfomanceCommonUtil;

import java.util.List;

/**
 * A utility class commonly used by blancoDb.
 *
 * The classes generated by this class will be used in the source code generated by blancoDb.
 *
 * @since 2006.03.02
 * @author IGA Tosiki
 */
public class BlancoDbUtilClassJava {
    /**
     * Class name of this class itself
     */
    public static final String CLASS_NAME = "BlancoDbUtil";

    /**
     * A blancoCg object factory
     */
    private BlancoCgObjectFactory fCgFactory = null;

    /**
     * The source code that contains this class
     */
    private BlancoCgSourceFile fCgSourceFile = null;

    private BlancoDbSetting fDbSetting = null;

    public BlancoDbUtilClassJava(final BlancoCgObjectFactory cgFactory,
            final String argPackage, final BlancoDbSetting argDbSetting) {
        fCgFactory = cgFactory;
        fCgSourceFile = fCgFactory.createSourceFile(argPackage,
                "This code is generated by blanco Framework.");

        this.fDbSetting = argDbSetting;
    }

    public BlancoCgSourceFile expand() {
        final BlancoCgClass cgClass = fCgFactory.createClass(CLASS_NAME, null);
        fCgSourceFile.getClassList().add(cgClass);

        {
            final List<String> listDesc = cgClass.getLangDoc()
                    .getDescriptionList();

            listDesc.add("A utility class commonly used by blancoDb.");
            listDesc.add("");
            listDesc.add("This class is used in the source code generated by blancoDb. <br>");
            listDesc
                    .add("This class is used from the source code generated by blancoDb. It is not recommended to call it directly.");
            listDesc.add("");
            listDesc.add("@since 2006.03.02");
            listDesc.add("@author blanco Framework");
        }

        {
            boolean fIsSQLServer = false;
            final boolean IS_DEBUG = false;

            fCgSourceFile.getImportList().add(
                    BlancoDbUtil.getRuntimePackage(fDbSetting)
                            + ".exception.IntegrityConstraintException");
            fCgSourceFile.getImportList().add(
                    BlancoDbUtil.getRuntimePackage(fDbSetting)
                            + ".exception.DeadlockException");
            fCgSourceFile.getImportList().add(
                    BlancoDbUtil.getRuntimePackage(fDbSetting)
                            + ".exception.TimeoutException");
            fCgSourceFile.getImportList().add("java.sql.SQLException");

            switch (fDbSetting.getDriverName()) {
            case BlancoDbDriverNameStringGroup.SQLSERVER_2000:
            case BlancoDbDriverNameStringGroup.SQLSERVER_2005:
                fIsSQLServer = true;
                if (IS_DEBUG) {
                    System.out.println("TRACE: SQL Server.");
                }
                break;
            default:
                if (IS_DEBUG) {
                    System.out.println("TRACE: Non-SQL Server. Driver value ("
                            + fDbSetting.getDriverName() + "]");
                }
                break;
            }

            {
                /* Prepares a map to convert the comparison operator symbols used in dynamic conditional clauses to SQL. */
                List<String> plainText = cgClass.getPlainTextList();
                plainText.add("");
                plainText.add("static final private Map<String, String> mapComparison = new HashMap<String, String>() {");
                plainText.add("{");
                plainText.add("put(\"EQ\", \"=\");");
                plainText.add("put(\"NE\", \"<>\");");
                plainText.add("put(\"GT\", \">\");");
                plainText.add("put(\"LT\", \"<\");");
                plainText.add("put(\"GE\", \">=\");");
                plainText.add("put(\"LE\", \"<=\");");
                plainText.add("put(\"LIKE\", \"LIKE\");");
                plainText.add("put(\"NOT LIKE\", \"NOT LIKE\");");
                plainText.add("}");
                plainText.add("};");
                fCgSourceFile.getImportList().add("java.util.Map");
                fCgSourceFile.getImportList().add("java.util.HashMap");
            }

            final BlancoCgMethod cgMethod = fCgFactory.createMethod(
                    "convertToBlancoException", null);
            cgClass.getMethodList().add(cgMethod);

            cgMethod.setStatic(true);

            final List<String> listDesc = cgMethod.getLangDoc()
                    .getDescriptionList();

            listDesc.add("Converts SQL exceptions to blanco Framework exception objects.<br>");
            listDesc.add("");

            if (fIsSQLServer) {
                listDesc
                        .add("Note: It is generated with adding decisions for Microsoft SQL Server 2000/20005.<br>");
            }
            listDesc
                    .add("Converts SQL exceptions that should be converted to blanco Framework exception objects.<br>");
            listDesc.add("If there is no destination to be converted, the original object is returned as is.");

            cgMethod.getParameterList().add(
                    fCgFactory.createParameter("ex", "java.sql.SQLException",
                            "Exception object returned from JDBC."));
            cgMethod
                    .setReturn(fCgFactory
                            .createReturn(
                                    "java.sql.SQLException",
                                    "The converted SQL exception object; SQLException or its inherited classes IntegrityConstraintException, DeadlockException, and TimeoutException will be returned."));

            final List<String> listLine = cgMethod.getLineList();

            listLine.add("if (ex.getSQLState() != null) {");
            listLine.add("if (ex.getSQLState().startsWith(\"23\")) {");
            listLine
                    .add("final IntegrityConstraintException exBlanco = new IntegrityConstraintException(\"Changes failed due to database constraint violation.\" + ex.toString(), ex.getSQLState(), ex.getErrorCode());");
            listLine.add("exBlanco.initCause(ex);");
            listLine.add("return exBlanco;");
            listLine.add("} else if (ex.getSQLState().equals(\"40001\")) {");
            listLine
                    .add("final DeadlockException exBlanco = new DeadlockException(\"Changes failed due to database deadlock.\" + ex.toString(), ex.getSQLState(), ex.getErrorCode());");
            listLine.add("exBlanco.initCause(ex);");
            listLine.add("return exBlanco;");
            listLine.add("} else if (ex.getSQLState().equals(\"HYT00\")) {");
            listLine
                    .add("final TimeoutException exBlanco = new TimeoutException(\"Changes failed due to database timeout.\" + ex.toString(), ex.getSQLState(), ex.getErrorCode());");
            listLine.add("exBlanco.initCause(ex);");
            listLine.add("return exBlanco;");

            if (fIsSQLServer) {
                // Lock timeout-specific decision.
                // This process is only valid in SQL Server 2000/2005.
                // A LockTimeoutException will be thrown only in SQL Server 2000/2005.
                fCgSourceFile.getImportList().add(
                        BlancoDbUtil.getRuntimePackage(fDbSetting)
                                + ".exception.LockTimeoutException");
                listLine
                        .add("} else if (ex.getSQLState().equals(\"HY000\") && ex.getErrorCode() == 1222) {");
                listLine.add("// Determines SQL Server-specific lock timeout exception codes.");
                listLine
                        .add("final LockTimeoutException exBlanco = new LockTimeoutException(\"Changes failed due to database lock timeout.\" + ex.toString(), ex.getSQLState(), ex.getErrorCode());");
                listLine.add("exBlanco.initCause(ex);");
                listLine.add("return exBlanco;");
            }
            listLine.add("}");
            listLine.add("}");
            listLine.add("return ex;");
        }

        {
            final BlancoCgMethod cgMethod = fCgFactory.createMethod(
                    "convertTimestampToDate", "Converts JDBC Timestamp to Date type.");
            cgClass.getMethodList().add(cgMethod);

            cgMethod.setStatic(true);
            cgMethod.setFinal(true);
            cgMethod.getLangDoc().getDescriptionList().add(
                    "Converts java.sql.Timestamp type to java.util.Date type.<br>");
            cgMethod.getLangDoc().getDescriptionList().add(
                    "This method is used from the source code generated by blancoDb. It is not recommended to call it directly.");

            cgMethod.getParameterList().add(
                    fCgFactory.createParameter("argTimestamp",
                            "java.sql.Timestamp", "Gives the Timestamp type of JDBC."));
            cgMethod.setReturn(fCgFactory.createReturn("java.util.Date",
                    "Returns the converted java.util.Date."));

            final List<String> listLine = cgMethod.getLineList();

            listLine.add("if (argTimestamp == null) {");
            listLine.add("return null;");
            listLine.add("}");
            listLine.add("return new Date(argTimestamp.getTime());");
        }

        {
            /*
             * Auto-generates dynamic conditional clauses from input parameters.
             */
            final BlancoCgMethod cgMethod = fCgFactory.createMethod(
                    "createDynamicClause", "Auto-generates dynamic conditional clauses from input parameters.");
            cgClass.getMethodList().add(cgMethod);

            cgMethod.setStatic(true);
            cgMethod.setFinal(true);
            cgMethod.getThrowList().add(
                    fCgFactory.createException(
                    "java.sql.SQLException",
                    "It may throw an SQL exception.")
            );

            cgMethod.getLangDoc().getDescriptionList().add(
                    "Generates dynamic SQL from the map generated based on the Excel definition and the parameters given at runtime.<br>");
            cgMethod.getLangDoc().getDescriptionList().add(
                    "This method is used from the source code generated by blancoDb. It is not recommended to call it directly.");

            /* First argument: Map class for dynamic condition definition */
            BlancoCgParameter paramMap = fCgFactory.createParameter("argMapClause", "java.util.Map", "Specifies the map of dynamic condition definitions.");
            cgMethod.getParameterList().add(paramMap);
            paramMap.getType().setGenerics("String, BlancoDbDynamicClause");
            /* BlancoDbDynamicClause is supposed to be placed in the same package as BlancoDbUtil, but it will put in the import list just in case. */
            fCgSourceFile.getImportList().add(fCgSourceFile.getPackage() + ".BlancoDbDynamicClause");
            paramMap.setFinal(true);

            /* Second argument: the parameter class of the dynamic condition. */
            String dynParam = fCgSourceFile.getPackage() + ".BlancoDbDynamicParameter";
            BlancoCgParameter paramParam = fCgFactory.createParameter("argParameter", dynParam, "Specifies the parameters for selecting dynamic condition.");
            cgMethod.getParameterList().add(paramParam);
            paramParam.getType().setGenerics("T");
            /* BlancoDbDynamicParameter is supposed to be placed in the same package as BlancoDbUtil, but it will put in the import list just in case. */
            fCgSourceFile.getImportList().add(dynParam);
            paramParam.setFinal(true);

            /* Third argument: paramter class for dynamic condition. */
            BlancoCgParameter paramQuery = fCgFactory.createParameter("argQuery", "java.lang.String", "Specifies the parameters for selecting dynamic condition.");
            cgMethod.getParameterList().add(paramQuery);
            paramQuery.setFinal(true);

            /* Fourth argument: the tag to be removed if null is passed as a parameter. */
            BlancoCgParameter paramExpectedTag = fCgFactory.createParameter("argExpectedTag", "java.lang.String", "Specifies the tag to be removed if null is passed as a parameter.");
            cgMethod.getParameterList().add(paramExpectedTag);
            paramQuery.setFinal(true);

            /* Defines the return value. */
            cgMethod.setReturn(fCgFactory.createReturn("java.lang.String",
                    "Returns the query after Tag replacement."));

            // define virtual parameter generic for LangDoc.
            BlancoCgVirtualParameter cgVirtualParameter = fCgFactory.createVirtualParameter("typeT", "T", "Virtual parameter for BlancoDbDynamicParameter.");
            cgMethod.getVirtualParameterList().add(cgVirtualParameter);
//            cgMethod.setVirtualParameterDefinition("<T>");

            /* Method body */
            final List<String> listLine = cgMethod.getLineList();

            listLine.add("String query = argQuery;");
            listLine.add("if (argParameter != null) {");
            listLine.add("String key = argParameter.getKey();");
            listLine.add("");
            listLine.add("List<T> values = argParameter.getValues();");
            listLine.add("if (key != null) {");
            listLine.add("BlancoDbDynamicClause dynamicClause = argMapClause.get(key);");
            listLine.add("if (dynamicClause != null) {"); //80
            listLine.add("/* Since the dynamic conditional clauses map is auto-generated, it is assumed that there are no invalid values. */");
            listLine.add("StringBuffer sb = new StringBuffer();");
            listLine.add("String tag = dynamicClause.getTag();");
            listLine.add("String condition = dynamicClause.getCondition();");
            listLine.add("");
            listLine.add("if (\"LITERAL\".equals(condition)) {");
            listLine.add("if (values != null && values.size() == 1) {");
            listLine.add("BlancoDbDynamicLiteral literal = (BlancoDbDynamicLiteral) values.get(0);");
            listLine.add("if (literal != null && !literal.getInvalid() && dynamicClause.getItems() != null) {");
            listLine.add("sb.append(\" \");");
            listLine.add("int count = 0;");
            listLine.add("for (String item : dynamicClause.getItems()) {");
            listLine.add("if (count > 0) {");
            listLine.add("sb.append(\",\");");
            listLine.add("}");
            listLine.add("sb.append(item);");
            listLine.add("count++;");
            listLine.add("}");
            listLine.add("sb.append(\" \");");
            listLine.add("}");
            listLine.add("}");
            listLine.add("} else if (\"FUNCTION\".equals(condition)) {");
            listLine.add("if (values != null && values.size() == 1) {");
            listLine.add("sb.append(\" \");");
            listLine.add("sb.append(dynamicClause.getItems().get(0));");
            listLine.add("sb.append(\" \");");
            listLine.add("}");
            listLine.add("} else if (\"ORDERBY\".equals(condition)) {");
            listLine.add("if (values != null && values.size() > 0) {");
            listLine.add("sb.append(\"ORDER BY \");");
            listLine.add("int count = 0;");
            listLine.add("for (T value : values) {");
            listLine.add("BlancoDbDynamicOrderBy orderBy = (BlancoDbDynamicOrderBy) value;");
            listLine.add("if (count > 0) {");
            listLine.add("sb.append(\", \");");
            listLine.add("}");
            listLine.add("String column = dynamicClause.getItem(orderBy.getColumn());");
            listLine.add("if (column == null) {");
            listLine.add("throw new SQLException(\"The [ \" + orderBy.getColumn() + \" ] specified as input is undefined in the definition document.\", \"42S22\", 9999);");
            listLine.add("}");
            listLine.add("sb.append(column);");
            listLine.add("if (!\"ASC\".equals(orderBy.getOrder())) {");
            listLine.add("sb.append(\" DESC\");");
            listLine.add("} else {");
            listLine.add("sb.append(\" ASC\");");
            listLine.add("}");
            listLine.add("count++;");
            listLine.add("}");
            listLine.add("}");
            listLine.add("} else if (\"BETWEEN\".equals(condition)) {");
            listLine.add("if (values != null && values.size() == 2) {");
            listLine.add("sb.append(\" \" + dynamicClause.getLogical() + \" ( \" + dynamicClause.getItems().get(0) + \" BETWEEN ? AND ? )\");");
            listLine.add("}"); // 100
            listLine.add("} else if (\"NOT BETWEEN\".equals(condition)) {");
            listLine.add("if (values != null && values.size() == 2) {");
            listLine.add("sb.append(\" \" + dynamicClause.getLogical() + \" ( \" + dynamicClause.getItems().get(0) + \" NOT BETWEEN ? AND ? )\");");
            listLine.add("}"); // 100
            listLine.add("} else if (\"IN\".equals(condition)) {");
            listLine.add("if (values != null && values.size() > 0) {");
            listLine.add("sb.append(\" \" + dynamicClause.getLogical() + \" ( \" + dynamicClause.getItems().get(0) + \" IN ( \");");
            listLine.add("int count = 0;");
            listLine.add("for (T value : values) {");
            listLine.add("if (count > 0) {");
            listLine.add("sb.append(\", \");");
            listLine.add("}");
            listLine.add("sb.append(\"?\");");
            listLine.add("count++;"); // 110
            listLine.add("}");
            listLine.add("sb.append(\" )\");");
            listLine.add("sb.append(\" )\");");
            listLine.add("}");
            listLine.add("} else if (\"NOT IN\".equals(condition)) {");
            listLine.add("if (values != null && values.size() > 0) {");
            listLine.add("sb.append(\" \" + dynamicClause.getLogical() + \" ( \" + dynamicClause.getItems().get(0) + \" NOT IN ( \");");
            listLine.add("int count = 0;");
            listLine.add("for (T value : values) {");
            listLine.add("if (count > 0) {");
            listLine.add("sb.append(\", \");");
            listLine.add("}");
            listLine.add("sb.append(\"?\");");
            listLine.add("count++;"); // 110
            listLine.add("}");
            listLine.add("sb.append(\" )\");");
            listLine.add("sb.append(\" )\");");
            listLine.add("}");
            listLine.add("} else if (\"COMPARE\".equals(condition)) {");
            listLine.add("if (values != null && values.size() > 0) {");
            listLine.add("String logicalOperator = \"OR\";");
            listLine.add("if (argParameter.getLogicalOperator() != null && argParameter.getLogicalOperator().equalsIgnoreCase(\"AND\")) {");
            listLine.add("logicalOperator = \"AND\";");
            listLine.add("}");
            listLine.add("sb.append(\" \" + dynamicClause.getLogical() + \" ( \");");
            listLine.add("for (int count = 0; count < values.size(); count++) {");
            listLine.add("if (count > 0) {");
            listLine.add("sb.append(\" \" + logicalOperator + \" \");");
            listLine.add("}");
            listLine.add("sb.append(dynamicClause.getItems().get(0) + \" \" + mapComparison.get(dynamicClause.getComparison()) + \" ?\");");
            listLine.add("}");
            listLine.add("sb.append(\" )\");");
            listLine.add("}");
            listLine.add("}");
            listLine.add("query = argQuery.replace(\"${\" + tag + \"}\", sb.toString());"); // 120
            listLine.add("}");
            listLine.add("}");
            listLine.add("} else {");
            listLine.add("query = argQuery.replace(\"${\" + argExpectedTag + \"}\", \"\");");
            listLine.add("}");
            listLine.add("return query;");
        }

        {
            /*
             * Generates input parameter function for dynamic SQL.
             */
            final BlancoCgMethod cgMethod = fCgFactory.createMethod(
                    "setInputParameter", "Input parameter function for dynamic SQL.");
            cgClass.getMethodList().add(cgMethod);

            cgMethod.setStatic(true);
            cgMethod.setFinal(true);
            cgMethod.getLangDoc().getDescriptionList().add(
                    "Applies parameters given at runtime to dynamically generated conditional clauses.<br>");
            cgMethod.getLangDoc().getDescriptionList().add(
                    "This method is used from the source code generated by blancoDb. It is not recommended to call it directly.");

            /* First argument:  preparedStatement */
            BlancoCgParameter paramStatement = fCgFactory.createParameter("argStatement", "java.sql.PreparedStatement", "This is a dynamically defined preparedStatement.");
            cgMethod.getParameterList().add(paramStatement);
            paramStatement.setFinal(true);

            /* Second argument: a list of parameters */
            BlancoCgParameter paramList = fCgFactory.createParameter("values", "java.util.List", "This is a dynamically defined preparedStatement.");
            cgMethod.getParameterList().add(paramList);
            paramList.getType().setGenerics("T");
            paramList.setFinal(true);

            /* Third argument:  startIndex */
            BlancoCgParameter paramIndex = fCgFactory.createParameter("startIndex", "java.lang.Integer", "The starting index of the parameter.");
            cgMethod.getParameterList().add(paramIndex);
            paramIndex.setFinal(true);

            /* Return value */
            cgMethod.setReturn(fCgFactory.createReturn("int",
                    "Return the query after Tag replacement."));

            /* Exceptions */
            BlancoCgType sqlExpType = new BlancoCgType();
            sqlExpType.setName("java.sql.SQLException");
            /* Puts in the import list just in case it gets trimmed when it will be expanded. */
            fCgSourceFile.getImportList().add("java.sql.SQLException");
            BlancoCgException sqlExp = new BlancoCgException();
            sqlExp.setType(sqlExpType);
            sqlExp.setDescription("SQLException may be thrown.");
            cgMethod.getThrowList().add(sqlExp);

            // Description for virtual parameter generics.
            BlancoCgVirtualParameter cgVirtualParameter = fCgFactory.createVirtualParameter("typeT", "T", "Virtual parameter for BlancoDbDynamicParameter.");
            cgMethod.getVirtualParameterList().add(cgVirtualParameter);

            /* Method body */
            final List<String> listLine = cgMethod.getLineList();
            listLine.add("int index = startIndex;");
            listLine.add("for (T value : values) {");
            listLine.add("/*");
            listLine.add("* It seems to take care of the NULL case, but it may cause an error depending on the Database engine.");
            listLine.add("* e.g. NG for SQLServer, OK for MySQL connector.");
            listLine.add("*/");
            listLine.add("argStatement.setObject(index, value);");
            listLine.add("index++;");
            listLine.add("}");
            listLine.add("return index;");
        }

        if (fDbSetting.getLogging()) {
            switch (fDbSetting.getLoggingMode()) {
            case BlancoDbLoggingModeStringGroup.PERFORMANCE:
            case BlancoDbLoggingModeStringGroup.SQLID:
                BlancoPerfomanceCommonUtil.addPerfomanceFieldMethod(fCgFactory,
                        fCgSourceFile, cgClass);
                break;
            }
        }

        return fCgSourceFile;
    }
}
