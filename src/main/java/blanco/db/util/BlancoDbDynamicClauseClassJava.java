/*
 * blancoDb
 * Copyright (C) 2004-2006 Yasuo Nakanishi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */
package blanco.db.util;

import blanco.cg.BlancoCgObjectFactory;
import blanco.cg.valueobject.*;
import blanco.commons.util.BlancoNameAdjuster;
import blanco.db.common.stringgroup.BlancoDbLoggingModeStringGroup;
import blanco.db.common.valueobject.BlancoDbSetting;
import blanco.db.expander.query.BlancoPerfomanceCommonUtil;

import java.util.List;

/**
 * A utility class commonly used by blancoDb.
 *
 * The classes generated by this class will be used in the source code generated by blancoDb.
 *
 * @since 2020.09.04
 * @author tueda
 */
public class BlancoDbDynamicClauseClassJava {
    /**
     * Class name of this class itself
     */
    public static final String CLASS_NAME = "BlancoDbDynamicClause";

    /**
     * A blancoCg object factory
     */
    private BlancoCgObjectFactory fCgFactory = null;

    /**
     * The source code that contains this class
     */
    private BlancoCgSourceFile fCgSourceFile = null;

    private BlancoDbSetting fDbSetting = null;

    public BlancoDbDynamicClauseClassJava(final BlancoCgObjectFactory cgFactory,
                                          final String argPackage, final BlancoDbSetting argDbSetting) {
        fCgFactory = cgFactory;
        fCgSourceFile = fCgFactory.createSourceFile(argPackage,
                "This code is generated by blanco Framework.");

        this.fDbSetting = argDbSetting;
    }

    public BlancoCgSourceFile expand() {
        final BlancoCgClass cgClass = fCgFactory.createClass(CLASS_NAME, null);
        fCgSourceFile.getClassList().add(cgClass);

        {
            final List<String> listDesc = cgClass.getLangDoc()
                    .getDescriptionList();

            listDesc.add("A class that defines a dynamic conditional clause.");
            listDesc.add("");
            listDesc.add("This class is used in the source code generated by blancoDb.<br>");
            listDesc
                    .add("This class is used from the source code generated by blancoDb. It is not recommended to call it directly.");
            listDesc.add("");
            listDesc.add("@since 2020.09.01");
            listDesc.add("@author blanco Framework");
        }

        {
            /* fields */
            cgClass.getFieldList().add(
                    buildField("tag", "tag name")
            );
            cgClass.getFieldList().add(
                    buildField("condition", "conditional clause type")
            );
            cgClass.getFieldList().add(
                    buildField("items", "target Items", "java.util.List", "java.lang.String", "null")
            );
            cgClass.getFieldList().add(
                    buildField("comparison", "comparison operator")
            );
            cgClass.getFieldList().add(
                    buildField("logical", "logical operator (leading)")
            );
            cgClass.getFieldList().add(
                    buildField("type", "type of value")
            );
        }

        {
            /* constructors */
            cgClass.getMethodList().add(
                    buildConstructor("DEFAULT")
            );
            cgClass.getMethodList().add(
                    buildConstructor("ORDERBY")
            );
            cgClass.getMethodList().add(
                    buildConstructor("NOTCOMPARE")
            );
            cgClass.getMethodList().add(
                    buildConstructor("COMPARE")
            );
            cgClass.getMethodList().add(
                    buildConstructor("LITERAL")
            );
        }

        {
            /* Getter/Setter */
            cgClass.getMethodList().add(
                    buildMethodSet("tag", "tag name")
            );
            cgClass.getMethodList().add(
                    buildMethodGet("tag", "tag name")
            );

            cgClass.getMethodList().add(
                    buildMethodSet("condition", "conditional clause type")
            );
            cgClass.getMethodList().add(
                    buildMethodGet("condition", "conditional clause type")
            );

            cgClass.getMethodList().add(
                    buildMethodSet("items", "target Item", "java.util.List", "java.lang.String")
            );
            cgClass.getMethodList().add(
                    buildMethodGet("items", "target Item", "java.util.List", "java.lang.String")
            );

            cgClass.getMethodList().add(
                    buildMethodSet("comparison", "comparison operator")
            );
            cgClass.getMethodList().add(
                    buildMethodGet("comparison", "comparison operator")
            );

            cgClass.getMethodList().add(
                    buildMethodSet("logical", "logical operator (leading)")
            );
            cgClass.getMethodList().add(
                    buildMethodGet("logical", "logical operator (leading)")
            );

            cgClass.getMethodList().add(
                    buildMethodSet("type", "type of value")
            );
            cgClass.getMethodList().add(
                    buildMethodGet("type", "type of value")
            );

            cgClass.getMethodList().add(
                    buildMethodItems()
            );
            cgClass.getMethodList().add(
                    buildMethodGetItem()
            );
        }

        if (fDbSetting.getLogging()) {
            switch (fDbSetting.getLoggingMode()) {
                case BlancoDbLoggingModeStringGroup.PERFORMANCE:
                case BlancoDbLoggingModeStringGroup.SQLID:
                    BlancoPerfomanceCommonUtil.addPerfomanceFieldMethod(fCgFactory,
                            fCgSourceFile, cgClass);
                    break;
            }
        }

        return fCgSourceFile;
    }

    private BlancoCgField buildField(
            final String name,
            final String desc
    ) {
        final BlancoCgField cgField = fCgFactory.createField(name, "java.lang.String", desc);
        cgField.setDefault("null");
        cgField.setAccess("private");
        return cgField;
    }

    private BlancoCgMethod buildConstructor(String type) {
        final BlancoCgMethod cgMethod = fCgFactory.createMethod(CLASS_NAME, "constructor");
        cgMethod.setConstructor(true);

        if ("DEFAULT".equals(type)) {
            return cgMethod;
        }

        final List<String> lineList = cgMethod.getLineList();

        cgMethod.getParameterList().add(
                fCgFactory.createParameter("argTag", "java.lang.String", "tag name"));
        lineList.add("this.tag = argTag;");

        cgMethod.getParameterList().add(
                fCgFactory.createParameter("argCondition", "java.lang.String", "conditional clause type"));
        lineList.add("this.condition = argCondition;");

        cgMethod.getParameterList().add(
                fCgFactory.createParameter("argItem", "java.lang.String", "target Item"));
//        lineList.add("this.items = this.parseItems(argItem);");

        if ("LITERAL".equals(type)) {
            cgMethod.getParameterList().add(
                    fCgFactory.createParameter("argRawItem", "java.lang.Boolean", "If true, it will not parse the taget Item as comma-separated."));
            lineList.add("if (argRawItem) {");
            lineList.add("this.items = new java.util.ArrayList<>();");
            lineList.add("items.add(argItem);");
            lineList.add("} else {");
            lineList.add("this.items = this.parseItems(argItem);");
            lineList.add("}");
            return cgMethod;
        }

        lineList.add("this.items = new java.util.ArrayList<>();");
        lineList.add("items.add(argItem);");

        if ("ORDERBY".equals(type)) {
            return cgMethod;
        }

        cgMethod.getParameterList().add(
                fCgFactory.createParameter("argLogical", "java.lang.String", "logical operator (leading)"));
        lineList.add("this.logical = argLogical;");

        cgMethod.getParameterList().add(
                fCgFactory.createParameter("argType", "java.lang.String", "type of value"));
        lineList.add("this.type = argType;");

        if (!"COMPARE".equals(type)) {
            return cgMethod;
        }

        cgMethod.getParameterList().add(
                fCgFactory.createParameter("argComparison", "java.lang.String", "comparison operator"));
        lineList.add("this.comparison = argComparison;");

        return cgMethod;
    }

    private BlancoCgMethod buildMethodSet(
            final String name,
            final String desc) {
        // Generates a setter method for each field.
        final BlancoCgMethod cgMethod = fCgFactory.createMethod("set" + BlancoNameAdjuster.toClassName(name), desc);

        cgMethod.getParameterList().add(
                fCgFactory.createParameter("arg" + BlancoNameAdjuster.toClassName(name),
                        "java.lang.String", desc)
        );

        // method implementation
        cgMethod.getLineList().add(
                "this." + name + " = " + "arg" + BlancoNameAdjuster.toClassName(name) + ";"
        );
        return cgMethod;
    }

    private BlancoCgMethod buildMethodGet(
            final String name,
            final String desc) {
        // Generates a getter method for each field.
        final BlancoCgMethod cgMethod = fCgFactory.createMethod("get" + BlancoNameAdjuster.toClassName(name), desc);

        cgMethod.setReturn(fCgFactory.createReturn("java.lang.String", desc));

        // method implementation
        cgMethod.getLineList().add(
                "return this." + name + ";");

        return cgMethod;
    }

    private BlancoCgField buildField(
            final String name,
            final String desc,
            final String type,
            final String generic,
            final String defaultValud
    ) {
        final BlancoCgField cgField = fCgFactory.createField(name, type, desc);
        cgField.setAccess("private");
        if (generic != null && generic.length() > 0) {
            cgField.getType().setGenerics(generic);
        }
        cgField.setDefault(defaultValud);
        return cgField;
    }

    private BlancoCgMethod buildMethodSet(
            final String name,
            final String desc,
            final String type,
            final String generic
    ) {
        // Generates a setter method for each field.
        final BlancoCgMethod cgMethod = fCgFactory.createMethod("set" + BlancoNameAdjuster.toClassName(name), desc);

        BlancoCgParameter parameter = fCgFactory.createParameter("arg" + BlancoNameAdjuster.toClassName(name), type, desc);
        if (generic != null && generic.length() > 0) {
            parameter.getType().setGenerics(generic);
        }
        cgMethod.getParameterList().add(parameter);

        // method implementation
        cgMethod.getLineList().add(
                "this." + name + " = " + "arg" + BlancoNameAdjuster.toClassName(name) + ";"
        );
        return cgMethod;
    }

    private BlancoCgMethod buildMethodGet(
            final String name,
            final String desc,
            final String type,
            final String generic
    ) {
        // Generates a getter method for each field.
        final BlancoCgMethod cgMethod = fCgFactory.createMethod("get" + BlancoNameAdjuster.toClassName(name), desc);

        cgMethod.setReturn(fCgFactory.createReturn(type, desc));
        if (generic != null && generic.length() > 0) {
            cgMethod.getReturn().getType().setGenerics(generic);
        }

        // method implementation
        cgMethod.getLineList().add(
                "return this." + name + ";");

        return cgMethod;
    }

    private BlancoCgMethod buildMethodItems() {
        final BlancoCgMethod cgMethod = fCgFactory.createMethod("parseItems", "Submits a comma-separated list of target item to the list of strings.");
        BlancoCgParameter parameter = fCgFactory.createParameter("argItem", "java.lang.String", "A comma-separated list of items entered in the target items.");
        parameter.setFinal(true);
        cgMethod.getParameterList().add(
                parameter
        );
        cgMethod.setReturn(
                fCgFactory.createReturn("java.util.List", "A list of item.")
        );
        cgMethod.getReturn().getType().setGenerics("java.lang.String");

        List<String> lineList = cgMethod.getLineList();
        lineList.add("java.util.List<java.lang.String> items = new java.util.ArrayList<>();");
        lineList.add("if (argItem != null && argItem.length() > 0) {");
        lineList.add("java.lang.String [] itemArray = argItem.split(\",\");");
        lineList.add("for (int i = 0; i < itemArray.length; i++) {");
        lineList.add("items.add(itemArray[i].trim());");
        lineList.add("}");
        lineList.add("}");
        lineList.add("return items;");

        return cgMethod;
    }

    private BlancoCgMethod buildMethodGetItem() {
        final BlancoCgMethod cgMethod = fCgFactory.createMethod("getItem", "Selects an item from a group of predefined items.");
        BlancoCgParameter parameter = fCgFactory.createParameter("argKey", "java.lang.String", "The item that was entered.");
        parameter.setFinal(true);
        cgMethod.getParameterList().add(
                parameter
        );
        cgMethod.setReturn(
                fCgFactory.createReturn("java.lang.String", "If the specified item does not exist, null is returned.")
        );

        List<String> lineList = cgMethod.getLineList();
        lineList.add("String item = null;");
        lineList.add("for (String defined : this.items) {");
        lineList.add("if (defined.equals(argKey)) {");
        lineList.add("item = defined;");
        lineList.add("break;");
        lineList.add("}");
        lineList.add("}");
        lineList.add("return item;");

        return cgMethod;
    }
}
