/*
 * blancoDb
 * Copyright (C) 2004-2006 Yasuo Nakanishi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */
package blanco.db.expander.query.invoker;

import blanco.cg.BlancoCgObjectFactory;
import blanco.cg.valueobject.BlancoCgSourceFile;
import blanco.commons.util.BlancoNameAdjuster;
import blanco.db.common.expander.BlancoDbAbstractClass;
import blanco.db.common.util.BlancoDbUtil;
import blanco.db.common.valueobject.BlancoDbSetting;
import blanco.db.common.valueobject.BlancoDbSqlInfoStructure;
import blanco.db.expander.query.*;
import blanco.db.expander.query.field.*;
import blanco.db.expander.query.iterator.SetInputParameterMethod;
import blanco.db.resourcebundle.BlancoDbResourceBundle;

/**
 * A class for expanding individual methods.
 *
 * @author Yasuo Nakanishi
 */
public class QueryInvokerClass extends BlancoDbAbstractClass {
    private final BlancoDbResourceBundle fBundle = new BlancoDbResourceBundle();

    public QueryInvokerClass(final BlancoDbSetting argDbSetting,
            final BlancoDbSqlInfoStructure argSqlInfo,
            final BlancoCgObjectFactory argCgFactory) {
        super(argDbSetting, argSqlInfo, argCgFactory);
    }

    public BlancoCgSourceFile expand() {
        final String className = BlancoNameAdjuster.toClassName(fSqlInfo
                .getName()) + "Invoker";

        fCgSourceFile = fCgFactory.createSourceFile(
                BlancoDbUtil.getBasePackage(fSqlInfo, fDbSetting) + ".query",
                "This code is generated by blanco Framework.");
        fCgClass = fCgFactory.createClass(className, "[" + fSqlInfo.getName()
                + "] " + fSqlInfo.getDescription() + " (QueryInvoker)");
        fCgSourceFile.getClassList().add(fCgClass);

        if (fDbSetting.getUseRuntime()) {
            // (2013/01/08 Unregisters once) fCgClass.getExtendClassList().add(fCgFactory.createType("java.io.Closeable"));
            fCgClass.getImplementInterfaceList().add(fCgFactory.createType("blanco.db.runtime.BlancoDbQuery"));

            // Adds annotations.
            fCgClass.getAnnotationList().add("BlancoGeneratedBy(name = \"blancoDb\")");
            fCgSourceFile.getImportList().add("blanco.fw.BlancoGeneratedBy");
        }

        fCgClass.getLangDoc().getDescriptionList()
                .add("Wraps an executable SQL statement and provides various accessors.<br>");
        if (fSqlInfo.getSingle()) {
            fCgClass.getLangDoc().getDescriptionList()
                    .add("Single attribute: Enabled (expected number of processes is 1)<br>");
        }

        fCgSourceFile.getImportList().add(
                BlancoDbUtil.getRuntimePackage(fDbSetting)
                        + ".exception.IntegrityConstraintException");

        // Always imports BlancoDbUtil.
        fCgSourceFile.getImportList().add(
                BlancoDbUtil.getRuntimePackage(fDbSetting)
                        + ".util.BlancoDbUtil");

        /*
         * If DynamicClause has been defined, imports it.
         */
        if (fSqlInfo.getDynamicConditionList().size() > 0) {
            fCgSourceFile.getImportList().add(
                    BlancoDbUtil.getRuntimePackage(fDbSetting) + ".util.BlancoDbDynamicClause"
            );
            fCgSourceFile.getImportList().add(
                    BlancoDbUtil.getRuntimePackage(fDbSetting) + ".util.BlancoDbDynamicParameter"
            );
            fCgSourceFile.getImportList().add(
                    BlancoDbUtil.getRuntimePackage(fDbSetting) + ".util.BlancoDbDynamicOrderBy"
            );
            fCgSourceFile.getImportList().add(
                    BlancoDbUtil.getRuntimePackage(fDbSetting) + ".util.BlancoDbDynamicLiteral"
            );
        }

        new MapDynamicClauseField(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile, fCgClass).expand();
        new ConnectionField(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile,
                fCgClass).expand();
        new StatementField(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile,
                fCgClass, false).expand();

        new QueryConstructor(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile,
                fCgClass).expand();
        new GetQueryMethod(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile,
                fCgClass).expand();

        new PrepareStatementMethod(fDbSetting, fSqlInfo, fCgFactory,
                fCgSourceFile, fCgClass).expand();
        // t.iga
        new PrepareStatementMethod2(fDbSetting, fSqlInfo, fCgFactory,
                fCgSourceFile, fCgClass).expand();

        // Binds only if input parameters are present.
        if (fSqlInfo.getInParameterList().size() > 0 ||
                fSqlInfo.getDynamicConditionList().size() > 0) {
            new SetInputParameterMethod(fDbSetting, fSqlInfo, fCgFactory,
                    fCgSourceFile, fCgClass, false).expand();
        }
        new ExecuteUpdateMethod(fDbSetting, fSqlInfo, fCgFactory,
                fCgSourceFile, fCgClass).expand();
        if (fSqlInfo.getSingle()) {
            new ExecuteSingleUpdateMethod(fDbSetting, fSqlInfo, fCgFactory,
                    fCgSourceFile, fCgClass).expand();
        }

        if (fBundle.getExpanderDisableGetStatement().equals("true") == false) {
            // It does not generate getStatement only if you need to make it compatible with 1.6.8 or earlier.
            new GetStatementMethod(fDbSetting, fSqlInfo, fCgFactory,
                    fCgSourceFile, fCgClass, false).expand();
        }

        new CloseMethod(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile,
                fCgClass).expand();

        if (!fDbSetting.getUseRuntime()) {
            new Finalize(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile, fCgClass)
                    .expand();
        }

		if (fDbSetting.getLoggingsql()) {
			// Outputs to stdout.
			new LogSqlInParamField(fDbSetting, fSqlInfo, fCgFactory,
					fCgSourceFile, fCgClass).expand();
			if (fSqlInfo.getDynamicSql()) {
				new LogSqlDynamicSqlField(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile, fCgClass).expand();
			}
		}

        if (fDbSetting.getLogging()) {
            fCgSourceFile.getImportList().add(
                    "org.apache.commons.logging.LogFactory");
            new LogField(fDbSetting, fSqlInfo, fCgFactory, fCgSourceFile,
                    fCgClass).expand();
        }

        return fCgSourceFile;
    }
}
