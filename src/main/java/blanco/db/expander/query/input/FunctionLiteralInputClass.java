/*
 * blancoDb
 * Copyright (C) 2004-2006 Yasuo Nakanishi
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 */
package blanco.db.expander.query.input;

import blanco.cg.BlancoCgObjectFactory;
import blanco.cg.valueobject.BlancoCgField;
import blanco.cg.valueobject.BlancoCgMethod;
import blanco.cg.valueobject.BlancoCgSourceFile;
import blanco.commons.util.BlancoNameAdjuster;
import blanco.db.common.expander.BlancoDbAbstractClass;
import blanco.db.common.util.BlancoDbUtil;
import blanco.db.common.valueobject.BlancoDbDynamicConditionFunctionStructure;
import blanco.db.common.valueobject.BlancoDbDynamicConditionStructure;
import blanco.db.common.valueobject.BlancoDbSetting;
import blanco.db.common.valueobject.BlancoDbSqlInfoStructure;
import blanco.db.resourcebundle.BlancoDbResourceBundle;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.List;

/**
 * A class for expanding individual classes.
 *
 * @author tueda
 */
public class FunctionLiteralInputClass extends BlancoDbAbstractClass {
    private final BlancoDbResourceBundle fBundle = new BlancoDbResourceBundle();

    private BlancoDbDynamicConditionStructure fConditionStructure = null;

    public FunctionLiteralInputClass(final BlancoDbSetting argDbSetting,
                                     final BlancoDbSqlInfoStructure argSqlInfo,
                                     final BlancoDbDynamicConditionStructure argConditionStructure,
                                     final BlancoCgObjectFactory argCgFactory) {
        super(argDbSetting, argSqlInfo, argCgFactory);
        this.fConditionStructure = argConditionStructure;
    }

    public BlancoCgSourceFile expand() {
        final String className = BlancoNameAdjuster.toClassName(fSqlInfo
                .getName()) + BlancoNameAdjuster.toClassName(fConditionStructure.getTag()) + "Input";

        fCgSourceFile = fCgFactory.createSourceFile(
                BlancoDbUtil.getBasePackage(fSqlInfo, fDbSetting) + ".query",
                "This code is generated by blanco Framework.");
        fCgClass = fCgFactory.createClass(className, "[" + fSqlInfo.getName()
                + "] " + fSqlInfo.getDescription() + " (FunctionLiteralInput)");
        fCgSourceFile.getClassList().add(fCgClass);

        if (fDbSetting.getUseRuntime()) {
            // Adds annotations
            fCgClass.getAnnotationList().add("BlancoGeneratedBy(name = \"blancoDb\")");
            fCgSourceFile.getImportList().add("blanco.fw.BlancoGeneratedBy");
        }

        fCgClass.getLangDoc().getDescriptionList()
                .add("Provides an object for input of dynamic conditional clause function definitions.<br>");

        BlancoDbDynamicConditionFunctionStructure functionStructure = fConditionStructure.getFunction();
        // fields
        int paramNum = functionStructure.getParamNum();
        fCgClass.getFieldList().add(
                buildField("paramNum", "java.lang.Integer", "" + paramNum, "The number of parameters expected by this input class.")
        );

        // Preparing Constructor
        final BlancoCgMethod cgConstruct = fCgFactory.createMethod(className, "Constructor");
        fCgClass.getMethodList().add(cgConstruct);
        cgConstruct.setConstructor(true);
        final List<String> lineListConst = cgConstruct.getLineList();

        // Preparing getParam
        final BlancoCgMethod cgGetParam =  fCgFactory.createMethod("getParam", "Get parameters");
        fCgClass.getMethodList().add(cgGetParam);
        cgGetParam.getParameterList().add(
                fCgFactory.createParameter(
                        "param",
                        "java.lang.Integer",
                        "The order of the parameters starting from 1."
                )
        );
        cgGetParam.setReturn(fCgFactory.createReturn(
                "java.lang.Object",
                "Returns a parameter. Must be cast with a given type."
        ));
        final List<String> lineListGetParam = cgGetParam.getLineList();

        Class<? extends BlancoDbDynamicConditionFunctionStructure> clazz = functionStructure.getClass();
        for (int i = 1; i <= paramNum; i++) {
            String tagParamType = String.format("paramType%02d", i);
            String strMethod = "get" + BlancoNameAdjuster.toClassName(tagParamType);
            String type = "";
            try {
                Method method = clazz.getMethod(strMethod);
                type = (String) method.invoke(functionStructure);
            } catch (NoSuchMethodException | InvocationTargetException | IllegalAccessException e) {
                throw new IllegalArgumentException("Fail to get " + tagParamType, e);
            }
            String tagParam = String.format("param%02d", i);
            fCgClass.getFieldList().add(
                    buildField(tagParam, type, null, i + "th parameter")
            );
            // Constructor
            cgConstruct.getParameterList().add(
                    fCgFactory.createParameter(
                            "arg" + BlancoNameAdjuster.toClassName(tagParam),
                            type,
                            i + "th parameter"
                    )
            );
            lineListConst.add("this." + tagParam + " = " + "arg" + BlancoNameAdjuster.toClassName(tagParam) + ";");

            // getParam
            lineListGetParam.add("if (param == " + i + ") {");
            lineListGetParam.add("return this." + tagParam + ";");
            lineListGetParam.add("}");
        }
        // getParam
        lineListGetParam.add("throw new IllegalArgumentException(\"Maxmum parameter number for this function is \" + this.paramNum + \" (start from 1).\");");

        return fCgSourceFile;
    }

    private BlancoCgField buildField(
            final String name,
            final String type,
            final String value,
            final String desc
    ) {
        final BlancoCgField cgField = fCgFactory.createField(name, type, desc);
        cgField.setDefault(value);
        cgField.setAccess("private");
        return cgField;
    }
}
