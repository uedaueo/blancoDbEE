/*
 * This code is generated by blanco Framework.
 */
package my.db.util;

/**
 * 動的条件句を定義するクラス。
 * このクラスはblancoDbが生成したソースコードで利用されます <br>
 * このクラスは blancoDbが生成したソースコードから利用されます。直接呼び出すことは推奨されません。
 * @since 2020.09.01
 * @author blanco Framework
 */
public class BlancoDbDynamicClause {
    /**
     * タグ名
     */
    private String tag = null;

    /**
     * 条件句タイプ
     */
    private String condition = null;

    /**
     * 対象Item
     */
    private String item = null;

    /**
     * 比較演算子
     */
    private String comparison = null;

    /**
     * 論理演算子（先導）
     */
    private String logical = null;

    /**
     * 値の型
     */
    private String type = null;

    /**
     * コンストラクタ
     */
    public BlancoDbDynamicClause() {
    }

    /**
     * コンストラクタ
     *
     * @param argTag タグ名
     * @param argCondition 条件句タイプ
     */
    public BlancoDbDynamicClause(final String argTag, final String argCondition) {
        this.tag = argTag;
        this.condition = argCondition;
    }

    /**
     * コンストラクタ
     *
     * @param argTag タグ名
     * @param argCondition 条件句タイプ
     * @param argItem 対象Item
     * @param argLogical 論理演算子（先導）
     * @param argType 値の型
     */
    public BlancoDbDynamicClause(final String argTag, final String argCondition, final String argItem, final String argLogical, final String argType) {
        this.tag = argTag;
        this.condition = argCondition;
        this.item = argItem;
        this.logical = argLogical;
        this.type = argType;
    }

    /**
     * コンストラクタ
     *
     * @param argTag タグ名
     * @param argCondition 条件句タイプ
     * @param argItem 対象Item
     * @param argLogical 論理演算子（先導）
     * @param argType 値の型
     * @param argComparison 比較演算子
     */
    public BlancoDbDynamicClause(final String argTag, final String argCondition, final String argItem, final String argLogical, final String argType, final String argComparison) {
        this.tag = argTag;
        this.condition = argCondition;
        this.item = argItem;
        this.logical = argLogical;
        this.type = argType;
        this.comparison = argComparison;
    }

    /**
     * タグ名
     *
     * @param argTag タグ名
     */
    public void setTag(final String argTag) {
        this.tag = argTag;
    }

    /**
     * タグ名
     *
     * @return タグ名
     */
    public String getTag() {
        return this.tag;
    }

    /**
     * 条件句タイプ
     *
     * @param argCondition 条件句タイプ
     */
    public void setCondition(final String argCondition) {
        this.condition = argCondition;
    }

    /**
     * 条件句タイプ
     *
     * @return 条件句タイプ
     */
    public String getCondition() {
        return this.condition;
    }

    /**
     * 対象Item
     *
     * @param argItem 対象Item
     */
    public void setItem(final String argItem) {
        this.item = argItem;
    }

    /**
     * 対象Item
     *
     * @return 対象Item
     */
    public String getItem() {
        return this.item;
    }

    /**
     * 比較演算子
     *
     * @param argComparison 比較演算子
     */
    public void setComparison(final String argComparison) {
        this.comparison = argComparison;
    }

    /**
     * 比較演算子
     *
     * @return 比較演算子
     */
    public String getComparison() {
        return this.comparison;
    }

    /**
     * 論理演算子（先導）
     *
     * @param argLogical 論理演算子（先導）
     */
    public void setLogical(final String argLogical) {
        this.logical = argLogical;
    }

    /**
     * 論理演算子（先導）
     *
     * @return 論理演算子（先導）
     */
    public String getLogical() {
        return this.logical;
    }

    /**
     * 値の型
     *
     * @param argType 値の型
     */
    public void setType(final String argType) {
        this.type = argType;
    }

    /**
     * 値の型
     *
     * @return 値の型
     */
    public String getType() {
        return this.type;
    }
}
